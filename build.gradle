import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'groovy'
    id 'jacoco'
    id 'checkstyle'
    id 'codenarc'
    id 'findbugs'
    id 'pmd'
    id 'com.github.johnrengelman.shadow' version '1.2.2'
    id 'com.github.kt3k.coveralls' version '2.4.0'
    id 'de.undercouch.download' version '2.1.0'
    id 'nebula.provided-base' version '3.0.3'
}

version = '0.1.0'
sourceCompatibility = '1.7'

ext {
    jeditAcceptanceTestVersion = '5.3.0'
    downloadsDir = file("$buildDir/tmp/downloads")
    jeditInstallDir = file("$buildDir/tmp/installs/jedit")
    jeditHomeDir = file("$jeditInstallDir/usr/share/jedit-$jeditAcceptanceTestVersion")
    jeditDistUrl = "http://downloads.sourceforge.net/project/jedit/jedit/$jeditAcceptanceTestVersion/jedit-$jeditAcceptanceTestVersion-noarch-1sao.tgz"
    jeditDistArchive = file("$downloadsDir/jedit-${jeditAcceptanceTestVersion}.tgz")
}

configurations {
    acceptanceTestCompile {
        description = 'Acceptance test compile-time dependences'
    }

    acceptanceTestRuntime {
        description = 'Acceptance test runtime dependences'
        extendsFrom acceptanceTestCompile
    }
}

repositories {
    jcenter()
    mavenCentral()

    maven {
        url 'https://dl.bintray.com/ssoloff/maven/'
    }
}

dependencies {
    compile(
        [group: 'com.googlecode.java-diff-utils', name: 'diffutils', version: '1.2.1'],
        [group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.annotation', version: '1.1.0']
    )
    provided(
        [group: 'io.github.ssoloff', name: 'jedit', version: '5.2.0'],
        [group: 'io.github.ssoloff', name: 'jedit-common-controls-plugin', version: '1.7.4'],
        [group: 'io.github.ssoloff', name: 'jedit-dirty-gutter-plugin', version: '0.3b'],
        [group: 'io.github.ssoloff', name: 'jedit-git-plugin', version: '0.7.1']
    )
    testCompile(
        [group: 'com.athaydes', name: 'spock-reports', version: '1.2.8', transitive: false],
        [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.13'],
        [group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.13'],
        [group: 'org.spockframework', name: 'spock-core', version: '1.0-groovy-2.4']
    )
    acceptanceTestCompile(
        [group: 'com.athaydes', name: 'spock-reports', version: '1.2.8', transitive: false],
        [group: 'io.github.ssoloff', name: 'jedit-test-framework', version: jeditAcceptanceTestVersion],
        [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.13'],
        [group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.13'],
        [group: 'org.spockframework', name: 'spock-core', version: '1.0-groovy-2.4']
    )
}

configurations {
    provided.allDependencies.each { dep ->
        shadowJar {
            dependencies {
                exclude(dependency(dep))
            }
        }
    }
}

sourceSets {
    acceptanceTest {
        java.srcDir file('src/acceptance-test/java')
        groovy.srcDir file('src/acceptance-test/groovy')
        resources.srcDir file('src/acceptance-test/resources')
        compileClasspath = configurations.acceptanceTestRuntime
        runtimeClasspath = output + compileClasspath
    }

    integrationTest {
        java.srcDir file('src/integration-test/java')
        groovy.srcDir file('src/integration-test/groovy')
        resources.srcDir file('src/integration-test/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task acceptanceTest(type: Test) {
    description = 'Runs the acceptance tests.'
    group = 'Verification'
    dependsOn 'downloadJEdit'
    mustRunAfter 'integrationTest'

    testClassesDir = sourceSets.acceptanceTest.output.classesDir
    classpath = sourceSets.acceptanceTest.runtimeClasspath

    systemProperty 'jedit.home', jeditHomeDir
}

task downloadJEdit() {
    outputs.dir jeditInstallDir

    doLast {
        download {
            src jeditDistUrl
            dest jeditDistArchive
        }

        copy {
            from tarTree(jeditDistArchive)
            into jeditInstallDir
        }
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'Verification'
    mustRunAfter 'test'

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task jacocoAcceptanceTestReport(type: JacocoReport) {
    description = 'Generates code coverage report for the acceptance tests.'
    group = 'Verification'

    sourceSets sourceSets.main
    executionData acceptanceTest
}

task jacocoCoverallsReport(type: JacocoReport) {
    description = 'Generates code coverage report for all tests suitable for Coveralls.'
    group = 'Verification'

    sourceSets sourceSets.main
    executionData test, integrationTest, acceptanceTest

    // coveralls plugin is hard-coded to look for reports associated with "jacocoTestReport" task
    reports {
        html {
            destination = jacocoTestReport.reports.html.destination
            enabled = true
        }
        xml {
            destination = jacocoTestReport.reports.xml.destination
            enabled = true
        }
    }
}

task jacocoIntegrationTestReport(type: JacocoReport) {
    description = 'Generates code coverage report for the integration tests.'
    group = 'Verification'

    sourceSets sourceSets.main
    executionData integrationTest
}

tasks.withType(Test) {
    systemProperty 'com.athaydes.spockframework.report.outputDir', "$reportsDir/spock"
}

task wrapper(type: Wrapper) {
    description = 'Generates Gradle wrapper files.'
    group = 'Build Setup'

    gradleVersion = '2.10'
}

acceptanceTest {
    reports.html.destination = file("$reports.html.destination/$name")
    reports.junitXml.destination = file("$reports.junitXml.destination/$name")

    jacocoAcceptanceTestReport.reports.html.destination = file("$project.jacoco.reportsDir/$name/html")
    jacocoAcceptanceTestReport.reports.xml.destination = file("$project.jacoco.reportsDir/$name/jacocoTestReport.xml")
    jacocoAcceptanceTestReport.reports.html.enabled = true
    jacocoAcceptanceTestReport.reports.xml.enabled = true
}

artifacts {
    archives shadowJar
}

check {
    dependsOn integrationTest, acceptanceTest
}

codenarc {
    configFile = file("${project.projectDir}/config/codenarc/codenarc.groovy")
}

integrationTest {
    reports.html.destination = file("$reports.html.destination/$name")
    reports.junitXml.destination = file("$reports.junitXml.destination/$name")

    jacocoIntegrationTestReport.reports.html.destination = file("$project.jacoco.reportsDir/$name/html")
    jacocoIntegrationTestReport.reports.xml.destination = file("$project.jacoco.reportsDir/$name/jacocoTestReport.xml")
    jacocoIntegrationTestReport.reports.html.enabled = true
    jacocoIntegrationTestReport.reports.xml.enabled = true
}

pmd {
    ruleSetFiles = files("${project.projectDir}/config/pmd/pmd.xml")
    ruleSets = []
}

processResources {
    filter ReplaceTokens, tokens: [
        'version': project.version
    ]
}

shadowJar {
    exclude 'META-INF/**/*'

    relocate 'difflib', 'myjarjardifflib.difflib'
    relocate 'org.eclipse', 'myjarjareclipse.org.eclipse'
}

test {
    reports.html.destination = file("$reports.html.destination/$name")
    reports.junitXml.destination = file("$reports.junitXml.destination/$name")

    jacocoTestReport.reports.html.enabled = true
    jacocoTestReport.reports.xml.enabled = true
}
