import com.github.jengelman.gradle.plugins.shadow.ShadowBasePlugin
import com.github.jengelman.gradle.plugins.shadow.ShadowJavaPlugin
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'groovy'
    id 'checkstyle'
    id 'codenarc'
    id 'distribution'
    id 'findbugs'
    id 'jacoco'
    id 'maven-publish'
    id 'pmd'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id 'com.github.kt3k.coveralls' version '2.4.0'
    id 'com.jfrog.bintray' version '1.6'
    id 'de.undercouch.download' version '2.1.0'
    id 'nebula.provided-base' version '3.0.3'
}

group = 'io.github.ssoloff'
version = '0.1.0'
sourceCompatibility = '1.7'

ext {
    gradleVersion = '2.11'
    jeditFunctionalTestVersion = '5.3.0'

    functionalTestApplicationInstallDir = file("$buildDir/tmp/jedit/application")
    functionalTestApplicationHomeDir = file("$functionalTestApplicationInstallDir/usr/share/jedit-$jeditFunctionalTestVersion")
    functionalTestPluginJarsDir = file("$buildDir/tmp/jedit/plugin-jars")
    instrumentedClassesDir = file("$buildDir/instrumented-classes/${sourceSets.main.name}")
}

configurations {
    functionalTestApplication {
        description = 'Application to be installed during functional tests'
    }

    functionalTestCompile {
        description = 'Functional test compile-time dependences'
    }

    functionalTestRuntime {
        description = 'Functional test runtime dependences'
        extendsFrom functionalTestCompile
    }

    functionalTestPlugins {
        description = 'Plugins to be installed during functional tests'
    }

    acceptanceTestPlugins {
        description = 'Plugins to be installed during acceptance tests'
        extendsFrom functionalTestPlugins
    }

    smokeTestPlugins {
        description = 'Plugins to be installed during smoke tests'
        extendsFrom functionalTestPlugins
    }
}

repositories {
    jcenter()
    mavenCentral()

    maven {
        url 'https://dl.bintray.com/ssoloff/maven/'
    }
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile(
        [group: 'com.googlecode.java-diff-utils', name: 'diffutils', version: '1.2.1'],
        [group: 'org.eclipse.jdt', name: 'org.eclipse.jdt.annotation', version: '1.1.0']
    )
    provided(
        [group: 'io.github.ssoloff', name: 'jedit', version: '5.2.0'],
        [group: 'io.github.ssoloff', name: 'CommonControls', version: '1.7.4'],
        [group: 'io.github.ssoloff', name: 'DirtyGutter', version: '0.4'],
        [group: 'io.github.ssoloff', name: 'GitPlugin', version: '0.8']
    )
    testCompile(
        [group: 'com.athaydes', name: 'spock-reports', version: '1.2.8', transitive: false],
        [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.13'],
        [group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.13'],
        [group: 'org.spockframework', name: 'spock-core', version: '1.0-groovy-2.4']
    )
    functionalTestCompile(
        [group: 'com.athaydes', name: 'spock-reports', version: '1.2.8', transitive: false],
        [group: 'commons-io', name: 'commons-io', version: '2.4'],
        // [group: 'io.github.ssoloff', name: 'jedit-test-framework', version: jeditFunctionalTestVersion],
        [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.13'],
        [group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.13'],
        [group: 'org.spockframework', name: 'spock-core', version: '1.0-groovy-2.4']
    )
    functionalTestApplication(
        [group: 'io.github.ssoloff', name: 'jedit', version: jeditFunctionalTestVersion, classifier: 'bin', ext: 'tar.gz']
    )
    functionalTestPlugins(
        [group: 'io.github.ssoloff', name: 'CommonControls', version: '1.7.4', classifier: 'bin', ext: 'tar.gz'],
        [group: 'io.github.ssoloff', name: 'DirtyGutter', version: '0.4', classifier: 'bin', ext: 'tar.gz'],
        [group: 'io.github.ssoloff', name: 'GitPlugin', version: '0.8', classifier: 'bin', ext: 'tar.gz'],
        [group: 'io.github.ssoloff', name: 'jedit-project-viewer-plugin', version: '3.5.3', classifier: 'bin', ext: 'tar.gz']
    )
    acceptanceTestPlugins(
        files("$distsDir/${project.name}-${project.version}-bin-instrumented.tar.gz")
    )
    smokeTestPlugins(
        files("$distsDir/${project.name}-${project.version}-bin.tar.gz")
    )
}

sourceSets {
    acceptanceTest {
        java.srcDir file('src/acceptance-test/java')
        groovy.srcDir file('src/acceptance-test/groovy')
        resources.srcDir file('src/acceptance-test/resources')
        compileClasspath = configurations.functionalTestRuntime
        runtimeClasspath = output + compileClasspath
    }

    integrationTest {
        java.srcDir file('src/integration-test/java')
        groovy.srcDir file('src/integration-test/groovy')
        resources.srcDir file('src/integration-test/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + compileClasspath
    }

    smokeTest {
        java.srcDir file('src/smoke-test/java')
        groovy.srcDir file('src/smoke-test/groovy')
        resources.srcDir file('src/smoke-test/resources')
        compileClasspath = configurations.functionalTestRuntime
        runtimeClasspath = output + compileClasspath
    }
}

task acceptanceTest(type: Test) {
    description = 'Runs the acceptance tests.'
    group = 'Verification'
    mustRunAfter 'integrationTest'
}

task instrumentClasses(dependsOn: classes) << {
    ant {
        taskdef(name:'jacocoinstrument', classname: 'org.jacoco.ant.InstrumentTask') {
            classpath path: configurations.jacocoAnt.asPath
        }

        jacocoinstrument(destdir: instrumentedClassesDir) {
            fileset(dir: sourceSets.main.output.classesDir) {
                include(name: '**/*.class')
            }
        }
    }
}

task instrumentedShadowJar(type: ShadowJar, dependsOn: instrumentClasses) {
    // apply default configuration (from ShadowJavaPlugin.configureShadowTask)
    group = ShadowJavaPlugin.SHADOW_GROUP
    description = 'Create a combined JAR of project and instrumented runtime dependencies.'
    conventionMapping.with {
        map('classifier') {
            'all-instrumented'
        }
    }
    manifest.inheritFrom project.tasks.jar.manifest
    doFirst {
        def files = project.configurations.findByName(ShadowBasePlugin.CONFIGURATION_NAME).files
        if (files) {
            def libs = [project.tasks.jar.manifest.attributes.get('Class-Path')]
            libs.addAll files.collect { "${it.name}" }
            manifest.attributes 'Class-Path': libs.findAll { it }.join(' ')
        }
    }
    from(project.sourceSets.main.output.resourcesDir, instrumentedClassesDir)
    configurations = [project.configurations.runtime]
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'Verification'
    mustRunAfter 'test'

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task jacocoAcceptanceTestReport(type: JacocoReport) {
    description = 'Generates code coverage report for the acceptance tests.'
    group = 'Verification'

    sourceSets sourceSets.main
    executionData acceptanceTest

    reports {
        html {
            destination = file("${project.jacoco.reportsDir}/acceptanceTest/html")
            enabled = true
        }
        xml {
            destination = file("${project.jacoco.reportsDir}/acceptanceTest/jacocoAcceptanceTestReport.xml")
            enabled = true
        }
    }
}

task jacocoIntegrationTestReport(type: JacocoReport) {
    description = 'Generates code coverage report for the integration tests.'
    group = 'Verification'

    sourceSets sourceSets.main
    executionData integrationTest

    reports {
        html {
            destination = file("${project.jacoco.reportsDir}/integrationTest/html")
            enabled = true
        }
        xml {
            destination = file("${project.jacoco.reportsDir}/integrationTest/jacocoIntegrationTestReport.xml")
            enabled = true
        }
    }
}

task jacocoRootReport(type: JacocoReport) {
    description = 'Generates aggregate code coverage report for all tests.'
    group = 'Verification'

    sourceSets sourceSets.main
    executionData test, integrationTest, acceptanceTest

    reports {
        html {
            destination = file("${project.jacoco.reportsDir}/root/html")
            enabled = true
        }
        xml {
            destination = file("${project.jacoco.reportsDir}/root/jacocoRootReport.xml")
            enabled = true
        }
    }
}

task smokeTest(type: Test) {
    description = 'Runs the smoke tests.'
    group = 'Verification'
    mustRunAfter 'acceptanceTest'
}

task validateShadowJars(dependsOn: [shadowJar, instrumentedShadowJar]) << {
    def shadowJar = new java.util.jar.JarFile(file(shadowJar.archivePath))
    def shadowJarEntryNames = shadowJar.entries().collect({ it.name }).toSorted()
    def instrumentedShadowJar = new java.util.jar.JarFile(file(instrumentedShadowJar.archivePath))
    def instrumentedShadowJarEntryNames = instrumentedShadowJar.entries().collect({ it.name }).toSorted()
    if (shadowJarEntryNames != instrumentedShadowJarEntryNames) {
        throw new GradleException('shadowJar contents do not match instrumentedShadowJar contents')
    }
}

task wrapper(type: Wrapper) {
    description = 'Generates Gradle wrapper files.'
    group = 'Build Setup'

    gradleVersion = project.gradleVersion
}

tasks.withType(ShadowJar) {
    dependencies { deps ->
        project.configurations.provided.allDependencies.each { dep ->
            deps.exclude(dependency(dep))
        }
    }
    exclude 'META-INF/maven/**/*'
    relocate 'difflib', 'gitdirtygutterjarjar.difflib'
    relocate 'org.eclipse', 'gitdirtygutterjarjar.org.eclipse'
}

tasks.withType(Test) {
    reports.html.destination = file("${reports.html.destination}/$name")
    reports.junitXml.destination = file("${reports.junitXml.destination}/$name")

    systemProperty 'com.athaydes.spockframework.report.outputDir', "$reportsDir/spock"
}

[acceptanceTest, smokeTest].each { task ->
    def sourceSet = sourceSets[task.name]
    task.testClassesDir = sourceSet.output.classesDir
    task.classpath = sourceSet.runtimeClasspath
    task.systemProperty 'jedit.home', functionalTestApplicationHomeDir
    task.doFirst {
        functionalTestApplicationInstallDir.deleteDir()
        def functionalTestApplicationBinDistTarPath = configurations.functionalTestApplication.singleFile.path
        copy {
            from tarTree(functionalTestApplicationBinDistTarPath)
            into functionalTestApplicationInstallDir
        }

        functionalTestPluginJarsDir.deleteDir()
        systemProperty 'io.github.ssoloff.functionalTestPluginJarsDir', functionalTestPluginJarsDir
        def functionalTestPluginBinDistTarPaths = configurations["${task.name}Plugins"].files*.path
        functionalTestPluginBinDistTarPaths.each { path ->
            copy {
                from tarTree(path)
                include '*.jar'
                into functionalTestPluginJarsDir
            }
        }
    }
}

artifacts {
    archives shadowJar
}

assemble {
    dependsOn validateShadowJars
}

check {
    dependsOn integrationTest, acceptanceTest, smokeTest
}

codenarc {
    configFile = file("${project.projectDir}/config/codenarc/codenarc.groovy")
}

coveralls {
    jacocoReportPath = jacocoRootReport.reports.xml.destination
}

distTar {
    classifier = 'bin'
    compression = Compression.GZIP
    extension = 'tar.gz'
}

distZip {
    classifier = 'bin'
}

distributions {
    instrumented {
        baseName = archivesBaseName
        contents {
            from instrumentedShadowJar
        }
    }

    main {
        baseName = archivesBaseName
        contents {
            from shadowJar
        }
    }
}

instrumentedDistTar {
    classifier = 'bin-instrumented'
    compression = Compression.GZIP
    extension = 'tar.gz'
}

instrumentedDistZip {
    classifier = 'bin-instrumented'
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
    }
}

pmd {
    ruleSetFiles = files("${project.projectDir}/config/pmd/pmd.xml")
    ruleSets = []
}

processResources {
    filter ReplaceTokens, tokens: [
        'version': project.version
    ]
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact shadowJar
            artifact source: distTar, classifier: 'bin', extension: 'tar.gz'
            artifact source: distZip, classifier: 'bin', extension: 'zip'
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey
    dryRun = bintrayDryRun.toBoolean()
    publish = true
    publications = ['maven']

    pkg {
        repo = 'maven'
        name = 'io.github.ssoloff:jedit-git-dirty-gutter-plugin'
        desc = 'jEdit Git DirtyGutter plugin'
        websiteUrl = 'https://github.com/ssoloff/jedit-git-dirty-gutter-plugin'
        issueTrackerUrl = 'https://github.com/ssoloff/jedit-git-dirty-gutter-plugin/issues'
        vcsUrl = 'https://github.com/ssoloff/jedit-git-dirty-gutter-plugin.git'
        licenses = ['GPL-2.0']
        publicDownloadNumbers = true

        version {
            name = "${project.version}"
            desc = "jEdit Git DirtyGutter plugin ${project.version}"
        }
    }
}

[distTar, distZip, instrumentedDistTar, instrumentedDistZip].each { task ->
    def distRootDir = "${task.baseName}-${task.version}-${task.classifier}/"
    task.eachFile { fileCopyDetails ->
        fileCopyDetails.path -= distRootDir
    }
}
